// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace GamePlayerTest {
PROTOBUF_CONSTEXPR TestMsg_TestMapEntry_DoNotUse::TestMsg_TestMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestMsg_TestMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMsg_TestMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMsg_TestMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMsg_TestMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMsg_TestMapEntry_DoNotUseDefaultTypeInternal _TestMsg_TestMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMsg_TestMsg3::TestMsg_TestMsg3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.testint32_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestMsg_TestMsg3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMsg_TestMsg3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMsg_TestMsg3DefaultTypeInternal() {}
  union {
    TestMsg_TestMsg3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMsg_TestMsg3DefaultTypeInternal _TestMsg_TestMsg3_default_instance_;
PROTOBUF_CONSTEXPR TestMsg::TestMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.listint_)*/{}
  , /*decltype(_impl_._listint_cached_byte_size_)*/{0}
  , /*decltype(_impl_.testmap_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.teststr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.testbytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.testmsg2_)*/nullptr
  , /*decltype(_impl_.testmsg3_)*/nullptr
  , /*decltype(_impl_.testheart_)*/nullptr
  , /*decltype(_impl_.testd_)*/0
  , /*decltype(_impl_.testf_)*/0
  , /*decltype(_impl_.testint32_)*/0
  , /*decltype(_impl_.testint64_)*/int64_t{0}
  , /*decltype(_impl_.testsint64_)*/int64_t{0}
  , /*decltype(_impl_.testsint32_)*/0
  , /*decltype(_impl_.testuint_)*/0u
  , /*decltype(_impl_.testulong_)*/uint64_t{0u}
  , /*decltype(_impl_.testfixed64_)*/uint64_t{0u}
  , /*decltype(_impl_.testfixed32_)*/0u
  , /*decltype(_impl_.testsfixed32_)*/0
  , /*decltype(_impl_.testsfixed64_)*/int64_t{0}
  , /*decltype(_impl_.testenum_)*/0
  , /*decltype(_impl_.testbool_)*/false
  , /*decltype(_impl_.testbool2123123_)*/false
  , /*decltype(_impl_.testenum2_)*/0} {}
struct TestMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMsgDefaultTypeInternal() {}
  union {
    TestMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMsgDefaultTypeInternal _TestMsg_default_instance_;
PROTOBUF_CONSTEXPR TestMsg2::TestMsg2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.testint32_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestMsg2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMsg2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMsg2DefaultTypeInternal() {}
  union {
    TestMsg2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMsg2DefaultTypeInternal _TestMsg2_default_instance_;
}  // namespace GamePlayerTest
static ::_pb::Metadata file_level_metadata_protocol_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protocol_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protocol_2eproto = nullptr;

const uint32_t TableStruct_protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg_TestMsg3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg_TestMsg3, _impl_.testint32_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testf_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testd_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testint32_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testint64_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testsint32_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testsint64_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testuint_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testulong_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testfixed32_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testfixed64_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testsfixed32_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testsfixed64_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testbool_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.teststr_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testbytes_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.listint_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testmap_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testenum_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testmsg2_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testmsg3_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testenum2_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testbool2123123_),
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg, _impl_.testheart_),
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GamePlayerTest::TestMsg2, _impl_.testint32_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::GamePlayerTest::TestMsg_TestMsg3)},
  { 17, 46, -1, sizeof(::GamePlayerTest::TestMsg)},
  { 69, -1, -1, sizeof(::GamePlayerTest::TestMsg2)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::GamePlayerTest::_TestMsg_TestMapEntry_DoNotUse_default_instance_._instance,
  &::GamePlayerTest::_TestMsg_TestMsg3_default_instance_._instance,
  &::GamePlayerTest::_TestMsg_default_instance_._instance,
  &::GamePlayerTest::_TestMsg2_default_instance_._instance,
};

const char descriptor_table_protodef_protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016protocol.proto\022\016GamePlayerTest\032\013test2."
  "proto\"\215\006\n\007TestMsg\022\r\n\005testF\030\001 \001(\002\022\022\n\005test"
  "D\030\002 \001(\001H\000\210\001\001\022\021\n\ttestInt32\030\003 \001(\005\022\021\n\ttestI"
  "nt64\030\004 \001(\003\022\022\n\ntestSInt32\030\005 \001(\021\022\022\n\ntestSI"
  "nt64\030\006 \001(\022\022\020\n\010testUInt\030\007 \001(\r\022\021\n\ttestULon"
  "g\030\010 \001(\004\022\023\n\013testFixed32\030\t \001(\007\022\023\n\013testFixe"
  "d64\030\n \001(\006\022\024\n\014testSFixed32\030\013 \001(\017\022\024\n\014testS"
  "Fixed64\030\014 \001(\020\022\020\n\010testBool\030\r \001(\010\022\017\n\007testS"
  "tr\030\016 \001(\t\022\021\n\ttestBytes\030\017 \001(\014\022\017\n\007listInt\030\020"
  " \003(\005\0225\n\007testMap\030\021 \003(\0132$.GamePlayerTest.T"
  "estMsg.TestMapEntry\022*\n\010testEnum\030\022 \001(\0162\030."
  "GamePlayerTest.TestEnum\022*\n\010testMsg2\030\023 \001("
  "\0132\030.GamePlayerTest.TestMsg2\0222\n\010testMsg3\030"
  "\024 \001(\0132 .GamePlayerTest.TestMsg.TestMsg3\022"
  "4\n\ttestEnum2\030\025 \001(\0162!.GamePlayerTest.Test"
  "Msg.TestEnum2\022\027\n\017testBool2123123\030\027 \001(\010\022+"
  "\n\ttestHeart\030\030 \001(\0132\030.GameSystemTest.Heart"
  "Msg\032.\n\014TestMapEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005valu"
  "e\030\002 \001(\t:\0028\001\032\035\n\010TestMsg3\022\021\n\ttestInt32\030\001 \001"
  "(\005\"!\n\tTestEnum2\022\n\n\006NORMAL\020\000\022\010\n\004BOSS\020\001B\010\n"
  "\006_testDJ\004\010\026\020\027R\016testInt3233333\"\035\n\010TestMsg"
  "2\022\021\n\ttestInt32\030\001 \001(\005* \n\010TestEnum\022\n\n\006NORM"
  "AL\020\000\022\010\n\004BOSS\020\005b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_protocol_2eproto_deps[1] = {
  &::descriptor_table_test2_2eproto,
};
static ::_pbi::once_flag descriptor_table_protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protocol_2eproto = {
    false, false, 902, descriptor_table_protodef_protocol_2eproto,
    "protocol.proto",
    &descriptor_table_protocol_2eproto_once, descriptor_table_protocol_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_protocol_2eproto::offsets,
    file_level_metadata_protocol_2eproto, file_level_enum_descriptors_protocol_2eproto,
    file_level_service_descriptors_protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protocol_2eproto_getter() {
  return &descriptor_table_protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protocol_2eproto(&descriptor_table_protocol_2eproto);
namespace GamePlayerTest {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestMsg_TestEnum2_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2eproto);
  return file_level_enum_descriptors_protocol_2eproto[0];
}
bool TestMsg_TestEnum2_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TestMsg_TestEnum2 TestMsg::NORMAL;
constexpr TestMsg_TestEnum2 TestMsg::BOSS;
constexpr TestMsg_TestEnum2 TestMsg::TestEnum2_MIN;
constexpr TestMsg_TestEnum2 TestMsg::TestEnum2_MAX;
constexpr int TestMsg::TestEnum2_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2eproto);
  return file_level_enum_descriptors_protocol_2eproto[1];
}
bool TestEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

TestMsg_TestMapEntry_DoNotUse::TestMsg_TestMapEntry_DoNotUse() {}
TestMsg_TestMapEntry_DoNotUse::TestMsg_TestMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMsg_TestMapEntry_DoNotUse::MergeFrom(const TestMsg_TestMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMsg_TestMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[0]);
}

// ===================================================================

class TestMsg_TestMsg3::_Internal {
 public:
};

TestMsg_TestMsg3::TestMsg_TestMsg3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GamePlayerTest.TestMsg.TestMsg3)
}
TestMsg_TestMsg3::TestMsg_TestMsg3(const TestMsg_TestMsg3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestMsg_TestMsg3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.testint32_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.testint32_ = from._impl_.testint32_;
  // @@protoc_insertion_point(copy_constructor:GamePlayerTest.TestMsg.TestMsg3)
}

inline void TestMsg_TestMsg3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.testint32_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestMsg_TestMsg3::~TestMsg_TestMsg3() {
  // @@protoc_insertion_point(destructor:GamePlayerTest.TestMsg.TestMsg3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMsg_TestMsg3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestMsg_TestMsg3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestMsg_TestMsg3::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePlayerTest.TestMsg.TestMsg3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.testint32_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMsg_TestMsg3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 testInt32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.testint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMsg_TestMsg3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GamePlayerTest.TestMsg.TestMsg3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 testInt32 = 1;
  if (this->_internal_testint32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_testint32(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GamePlayerTest.TestMsg.TestMsg3)
  return target;
}

size_t TestMsg_TestMsg3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePlayerTest.TestMsg.TestMsg3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 testInt32 = 1;
  if (this->_internal_testint32() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_testint32());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMsg_TestMsg3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestMsg_TestMsg3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMsg_TestMsg3::GetClassData() const { return &_class_data_; }


void TestMsg_TestMsg3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestMsg_TestMsg3*>(&to_msg);
  auto& from = static_cast<const TestMsg_TestMsg3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GamePlayerTest.TestMsg.TestMsg3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_testint32() != 0) {
    _this->_internal_set_testint32(from._internal_testint32());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMsg_TestMsg3::CopyFrom(const TestMsg_TestMsg3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePlayerTest.TestMsg.TestMsg3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg_TestMsg3::IsInitialized() const {
  return true;
}

void TestMsg_TestMsg3::InternalSwap(TestMsg_TestMsg3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.testint32_, other->_impl_.testint32_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMsg_TestMsg3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[1]);
}

// ===================================================================

class TestMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMsg>()._impl_._has_bits_);
  static void set_has_testd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::GamePlayerTest::TestMsg2& testmsg2(const TestMsg* msg);
  static const ::GamePlayerTest::TestMsg_TestMsg3& testmsg3(const TestMsg* msg);
  static const ::GameSystemTest::HeartMsg& testheart(const TestMsg* msg);
};

const ::GamePlayerTest::TestMsg2&
TestMsg::_Internal::testmsg2(const TestMsg* msg) {
  return *msg->_impl_.testmsg2_;
}
const ::GamePlayerTest::TestMsg_TestMsg3&
TestMsg::_Internal::testmsg3(const TestMsg* msg) {
  return *msg->_impl_.testmsg3_;
}
const ::GameSystemTest::HeartMsg&
TestMsg::_Internal::testheart(const TestMsg* msg) {
  return *msg->_impl_.testheart_;
}
void TestMsg::clear_testheart() {
  if (GetArenaForAllocation() == nullptr && _impl_.testheart_ != nullptr) {
    delete _impl_.testheart_;
  }
  _impl_.testheart_ = nullptr;
}
TestMsg::TestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TestMsg::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:GamePlayerTest.TestMsg)
}
TestMsg::TestMsg(const TestMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.listint_){from._impl_.listint_}
    , /*decltype(_impl_._listint_cached_byte_size_)*/{0}
    , /*decltype(_impl_.testmap_)*/{}
    , decltype(_impl_.teststr_){}
    , decltype(_impl_.testbytes_){}
    , decltype(_impl_.testmsg2_){nullptr}
    , decltype(_impl_.testmsg3_){nullptr}
    , decltype(_impl_.testheart_){nullptr}
    , decltype(_impl_.testd_){}
    , decltype(_impl_.testf_){}
    , decltype(_impl_.testint32_){}
    , decltype(_impl_.testint64_){}
    , decltype(_impl_.testsint64_){}
    , decltype(_impl_.testsint32_){}
    , decltype(_impl_.testuint_){}
    , decltype(_impl_.testulong_){}
    , decltype(_impl_.testfixed64_){}
    , decltype(_impl_.testfixed32_){}
    , decltype(_impl_.testsfixed32_){}
    , decltype(_impl_.testsfixed64_){}
    , decltype(_impl_.testenum_){}
    , decltype(_impl_.testbool_){}
    , decltype(_impl_.testbool2123123_){}
    , decltype(_impl_.testenum2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.testmap_.MergeFrom(from._impl_.testmap_);
  _impl_.teststr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teststr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_teststr().empty()) {
    _this->_impl_.teststr_.Set(from._internal_teststr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.testbytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testbytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_testbytes().empty()) {
    _this->_impl_.testbytes_.Set(from._internal_testbytes(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_testmsg2()) {
    _this->_impl_.testmsg2_ = new ::GamePlayerTest::TestMsg2(*from._impl_.testmsg2_);
  }
  if (from._internal_has_testmsg3()) {
    _this->_impl_.testmsg3_ = new ::GamePlayerTest::TestMsg_TestMsg3(*from._impl_.testmsg3_);
  }
  if (from._internal_has_testheart()) {
    _this->_impl_.testheart_ = new ::GameSystemTest::HeartMsg(*from._impl_.testheart_);
  }
  ::memcpy(&_impl_.testd_, &from._impl_.testd_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.testenum2_) -
    reinterpret_cast<char*>(&_impl_.testd_)) + sizeof(_impl_.testenum2_));
  // @@protoc_insertion_point(copy_constructor:GamePlayerTest.TestMsg)
}

inline void TestMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.listint_){arena}
    , /*decltype(_impl_._listint_cached_byte_size_)*/{0}
    , /*decltype(_impl_.testmap_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.teststr_){}
    , decltype(_impl_.testbytes_){}
    , decltype(_impl_.testmsg2_){nullptr}
    , decltype(_impl_.testmsg3_){nullptr}
    , decltype(_impl_.testheart_){nullptr}
    , decltype(_impl_.testd_){0}
    , decltype(_impl_.testf_){0}
    , decltype(_impl_.testint32_){0}
    , decltype(_impl_.testint64_){int64_t{0}}
    , decltype(_impl_.testsint64_){int64_t{0}}
    , decltype(_impl_.testsint32_){0}
    , decltype(_impl_.testuint_){0u}
    , decltype(_impl_.testulong_){uint64_t{0u}}
    , decltype(_impl_.testfixed64_){uint64_t{0u}}
    , decltype(_impl_.testfixed32_){0u}
    , decltype(_impl_.testsfixed32_){0}
    , decltype(_impl_.testsfixed64_){int64_t{0}}
    , decltype(_impl_.testenum_){0}
    , decltype(_impl_.testbool_){false}
    , decltype(_impl_.testbool2123123_){false}
    , decltype(_impl_.testenum2_){0}
  };
  _impl_.teststr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teststr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.testbytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testbytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestMsg::~TestMsg() {
  // @@protoc_insertion_point(destructor:GamePlayerTest.TestMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TestMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.listint_.~RepeatedField();
  _impl_.testmap_.Destruct();
  _impl_.testmap_.~MapField();
  _impl_.teststr_.Destroy();
  _impl_.testbytes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.testmsg2_;
  if (this != internal_default_instance()) delete _impl_.testmsg3_;
  if (this != internal_default_instance()) delete _impl_.testheart_;
}

void TestMsg::ArenaDtor(void* object) {
  TestMsg* _this = reinterpret_cast< TestMsg* >(object);
  _this->_impl_.testmap_.Destruct();
}
void TestMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePlayerTest.TestMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.listint_.Clear();
  _impl_.testmap_.Clear();
  _impl_.teststr_.ClearToEmpty();
  _impl_.testbytes_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.testmsg2_ != nullptr) {
    delete _impl_.testmsg2_;
  }
  _impl_.testmsg2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.testmsg3_ != nullptr) {
    delete _impl_.testmsg3_;
  }
  _impl_.testmsg3_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.testheart_ != nullptr) {
    delete _impl_.testheart_;
  }
  _impl_.testheart_ = nullptr;
  _impl_.testd_ = 0;
  ::memset(&_impl_.testf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.testenum2_) -
      reinterpret_cast<char*>(&_impl_.testf_)) + sizeof(_impl_.testenum2_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float testF = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.testf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double testD = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_testd(&has_bits);
          _impl_.testd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 testInt32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.testint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 testInt64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.testint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 testSInt32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.testsint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 testSInt64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.testsint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 testUInt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.testuint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 testULong = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.testulong_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 testFixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.testfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 testFixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.testfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed32 testSFixed32 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.testsfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed64 testSFixed64 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.testsfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // bool testBool = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.testbool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string testStr = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_teststr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GamePlayerTest.TestMsg.testStr"));
        } else
          goto handle_unusual;
        continue;
      // bytes testBytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_testbytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 listInt = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_listint(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 128) {
          _internal_add_listint(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, string> testMap = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.testmap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .GamePlayerTest.TestEnum testEnum = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_testenum(static_cast<::GamePlayerTest::TestEnum>(val));
        } else
          goto handle_unusual;
        continue;
      // .GamePlayerTest.TestMsg2 testMsg2 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_testmsg2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GamePlayerTest.TestMsg.TestMsg3 testMsg3 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_testmsg3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GamePlayerTest.TestMsg.TestEnum2 testEnum2 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_testenum2(static_cast<::GamePlayerTest::TestMsg_TestEnum2>(val));
        } else
          goto handle_unusual;
        continue;
      // bool testBool2123123 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.testbool2123123_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameSystemTest.HeartMsg testHeart = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_testheart(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GamePlayerTest.TestMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float testF = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_testf = this->_internal_testf();
  uint32_t raw_testf;
  memcpy(&raw_testf, &tmp_testf, sizeof(tmp_testf));
  if (raw_testf != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_testf(), target);
  }

  // optional double testD = 2;
  if (_internal_has_testd()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_testd(), target);
  }

  // int32 testInt32 = 3;
  if (this->_internal_testint32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_testint32(), target);
  }

  // int64 testInt64 = 4;
  if (this->_internal_testint64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_testint64(), target);
  }

  // sint32 testSInt32 = 5;
  if (this->_internal_testsint32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_testsint32(), target);
  }

  // sint64 testSInt64 = 6;
  if (this->_internal_testsint64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(6, this->_internal_testsint64(), target);
  }

  // uint32 testUInt = 7;
  if (this->_internal_testuint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_testuint(), target);
  }

  // uint64 testULong = 8;
  if (this->_internal_testulong() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_testulong(), target);
  }

  // fixed32 testFixed32 = 9;
  if (this->_internal_testfixed32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(9, this->_internal_testfixed32(), target);
  }

  // fixed64 testFixed64 = 10;
  if (this->_internal_testfixed64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(10, this->_internal_testfixed64(), target);
  }

  // sfixed32 testSFixed32 = 11;
  if (this->_internal_testsfixed32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(11, this->_internal_testsfixed32(), target);
  }

  // sfixed64 testSFixed64 = 12;
  if (this->_internal_testsfixed64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(12, this->_internal_testsfixed64(), target);
  }

  // bool testBool = 13;
  if (this->_internal_testbool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_testbool(), target);
  }

  // string testStr = 14;
  if (!this->_internal_teststr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_teststr().data(), static_cast<int>(this->_internal_teststr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GamePlayerTest.TestMsg.testStr");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_teststr(), target);
  }

  // bytes testBytes = 15;
  if (!this->_internal_testbytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_testbytes(), target);
  }

  // repeated int32 listInt = 16;
  {
    int byte_size = _impl_._listint_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          16, _internal_listint(), byte_size, target);
    }
  }

  // map<int32, string> testMap = 17;
  if (!this->_internal_testmap().empty()) {
    using MapType = ::_pb::Map<int32_t, std::string>;
    using WireHelper = TestMsg_TestMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_testmap();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "GamePlayerTest.TestMsg.TestMapEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(17, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(17, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .GamePlayerTest.TestEnum testEnum = 18;
  if (this->_internal_testenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_testenum(), target);
  }

  // .GamePlayerTest.TestMsg2 testMsg2 = 19;
  if (this->_internal_has_testmsg2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::testmsg2(this),
        _Internal::testmsg2(this).GetCachedSize(), target, stream);
  }

  // .GamePlayerTest.TestMsg.TestMsg3 testMsg3 = 20;
  if (this->_internal_has_testmsg3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::testmsg3(this),
        _Internal::testmsg3(this).GetCachedSize(), target, stream);
  }

  // .GamePlayerTest.TestMsg.TestEnum2 testEnum2 = 21;
  if (this->_internal_testenum2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_testenum2(), target);
  }

  // bool testBool2123123 = 23;
  if (this->_internal_testbool2123123() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_testbool2123123(), target);
  }

  // .GameSystemTest.HeartMsg testHeart = 24;
  if (this->_internal_has_testheart()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::testheart(this),
        _Internal::testheart(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GamePlayerTest.TestMsg)
  return target;
}

size_t TestMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePlayerTest.TestMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 listInt = 16;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.listint_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._listint_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<int32, string> testMap = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_testmap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_iterator
      it = this->_internal_testmap().begin();
      it != this->_internal_testmap().end(); ++it) {
    total_size += TestMsg_TestMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string testStr = 14;
  if (!this->_internal_teststr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_teststr());
  }

  // bytes testBytes = 15;
  if (!this->_internal_testbytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_testbytes());
  }

  // .GamePlayerTest.TestMsg2 testMsg2 = 19;
  if (this->_internal_has_testmsg2()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.testmsg2_);
  }

  // .GamePlayerTest.TestMsg.TestMsg3 testMsg3 = 20;
  if (this->_internal_has_testmsg3()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.testmsg3_);
  }

  // .GameSystemTest.HeartMsg testHeart = 24;
  if (this->_internal_has_testheart()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.testheart_);
  }

  // optional double testD = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  // float testF = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_testf = this->_internal_testf();
  uint32_t raw_testf;
  memcpy(&raw_testf, &tmp_testf, sizeof(tmp_testf));
  if (raw_testf != 0) {
    total_size += 1 + 4;
  }

  // int32 testInt32 = 3;
  if (this->_internal_testint32() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_testint32());
  }

  // int64 testInt64 = 4;
  if (this->_internal_testint64() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_testint64());
  }

  // sint64 testSInt64 = 6;
  if (this->_internal_testsint64() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_testsint64());
  }

  // sint32 testSInt32 = 5;
  if (this->_internal_testsint32() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_testsint32());
  }

  // uint32 testUInt = 7;
  if (this->_internal_testuint() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_testuint());
  }

  // uint64 testULong = 8;
  if (this->_internal_testulong() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_testulong());
  }

  // fixed64 testFixed64 = 10;
  if (this->_internal_testfixed64() != 0) {
    total_size += 1 + 8;
  }

  // fixed32 testFixed32 = 9;
  if (this->_internal_testfixed32() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 testSFixed32 = 11;
  if (this->_internal_testsfixed32() != 0) {
    total_size += 1 + 4;
  }

  // sfixed64 testSFixed64 = 12;
  if (this->_internal_testsfixed64() != 0) {
    total_size += 1 + 8;
  }

  // .GamePlayerTest.TestEnum testEnum = 18;
  if (this->_internal_testenum() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_testenum());
  }

  // bool testBool = 13;
  if (this->_internal_testbool() != 0) {
    total_size += 1 + 1;
  }

  // bool testBool2123123 = 23;
  if (this->_internal_testbool2123123() != 0) {
    total_size += 2 + 1;
  }

  // .GamePlayerTest.TestMsg.TestEnum2 testEnum2 = 21;
  if (this->_internal_testenum2() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_testenum2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMsg::GetClassData() const { return &_class_data_; }


void TestMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestMsg*>(&to_msg);
  auto& from = static_cast<const TestMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GamePlayerTest.TestMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.listint_.MergeFrom(from._impl_.listint_);
  _this->_impl_.testmap_.MergeFrom(from._impl_.testmap_);
  if (!from._internal_teststr().empty()) {
    _this->_internal_set_teststr(from._internal_teststr());
  }
  if (!from._internal_testbytes().empty()) {
    _this->_internal_set_testbytes(from._internal_testbytes());
  }
  if (from._internal_has_testmsg2()) {
    _this->_internal_mutable_testmsg2()->::GamePlayerTest::TestMsg2::MergeFrom(
        from._internal_testmsg2());
  }
  if (from._internal_has_testmsg3()) {
    _this->_internal_mutable_testmsg3()->::GamePlayerTest::TestMsg_TestMsg3::MergeFrom(
        from._internal_testmsg3());
  }
  if (from._internal_has_testheart()) {
    _this->_internal_mutable_testheart()->::GameSystemTest::HeartMsg::MergeFrom(
        from._internal_testheart());
  }
  if (from._internal_has_testd()) {
    _this->_internal_set_testd(from._internal_testd());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_testf = from._internal_testf();
  uint32_t raw_testf;
  memcpy(&raw_testf, &tmp_testf, sizeof(tmp_testf));
  if (raw_testf != 0) {
    _this->_internal_set_testf(from._internal_testf());
  }
  if (from._internal_testint32() != 0) {
    _this->_internal_set_testint32(from._internal_testint32());
  }
  if (from._internal_testint64() != 0) {
    _this->_internal_set_testint64(from._internal_testint64());
  }
  if (from._internal_testsint64() != 0) {
    _this->_internal_set_testsint64(from._internal_testsint64());
  }
  if (from._internal_testsint32() != 0) {
    _this->_internal_set_testsint32(from._internal_testsint32());
  }
  if (from._internal_testuint() != 0) {
    _this->_internal_set_testuint(from._internal_testuint());
  }
  if (from._internal_testulong() != 0) {
    _this->_internal_set_testulong(from._internal_testulong());
  }
  if (from._internal_testfixed64() != 0) {
    _this->_internal_set_testfixed64(from._internal_testfixed64());
  }
  if (from._internal_testfixed32() != 0) {
    _this->_internal_set_testfixed32(from._internal_testfixed32());
  }
  if (from._internal_testsfixed32() != 0) {
    _this->_internal_set_testsfixed32(from._internal_testsfixed32());
  }
  if (from._internal_testsfixed64() != 0) {
    _this->_internal_set_testsfixed64(from._internal_testsfixed64());
  }
  if (from._internal_testenum() != 0) {
    _this->_internal_set_testenum(from._internal_testenum());
  }
  if (from._internal_testbool() != 0) {
    _this->_internal_set_testbool(from._internal_testbool());
  }
  if (from._internal_testbool2123123() != 0) {
    _this->_internal_set_testbool2123123(from._internal_testbool2123123());
  }
  if (from._internal_testenum2() != 0) {
    _this->_internal_set_testenum2(from._internal_testenum2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMsg::CopyFrom(const TestMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePlayerTest.TestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg::IsInitialized() const {
  return true;
}

void TestMsg::InternalSwap(TestMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.listint_.InternalSwap(&other->_impl_.listint_);
  _impl_.testmap_.InternalSwap(&other->_impl_.testmap_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.teststr_, lhs_arena,
      &other->_impl_.teststr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.testbytes_, lhs_arena,
      &other->_impl_.testbytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMsg, _impl_.testenum2_)
      + sizeof(TestMsg::_impl_.testenum2_)
      - PROTOBUF_FIELD_OFFSET(TestMsg, _impl_.testmsg2_)>(
          reinterpret_cast<char*>(&_impl_.testmsg2_),
          reinterpret_cast<char*>(&other->_impl_.testmsg2_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[2]);
}

// ===================================================================

class TestMsg2::_Internal {
 public:
};

TestMsg2::TestMsg2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GamePlayerTest.TestMsg2)
}
TestMsg2::TestMsg2(const TestMsg2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestMsg2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.testint32_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.testint32_ = from._impl_.testint32_;
  // @@protoc_insertion_point(copy_constructor:GamePlayerTest.TestMsg2)
}

inline void TestMsg2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.testint32_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestMsg2::~TestMsg2() {
  // @@protoc_insertion_point(destructor:GamePlayerTest.TestMsg2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMsg2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestMsg2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestMsg2::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePlayerTest.TestMsg2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.testint32_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMsg2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 testInt32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.testint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMsg2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GamePlayerTest.TestMsg2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 testInt32 = 1;
  if (this->_internal_testint32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_testint32(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GamePlayerTest.TestMsg2)
  return target;
}

size_t TestMsg2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePlayerTest.TestMsg2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 testInt32 = 1;
  if (this->_internal_testint32() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_testint32());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMsg2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestMsg2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMsg2::GetClassData() const { return &_class_data_; }


void TestMsg2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestMsg2*>(&to_msg);
  auto& from = static_cast<const TestMsg2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GamePlayerTest.TestMsg2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_testint32() != 0) {
    _this->_internal_set_testint32(from._internal_testint32());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMsg2::CopyFrom(const TestMsg2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePlayerTest.TestMsg2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg2::IsInitialized() const {
  return true;
}

void TestMsg2::InternalSwap(TestMsg2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.testint32_, other->_impl_.testint32_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMsg2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protocol_2eproto_getter, &descriptor_table_protocol_2eproto_once,
      file_level_metadata_protocol_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace GamePlayerTest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::GamePlayerTest::TestMsg_TestMsg3*
Arena::CreateMaybeMessage< ::GamePlayerTest::TestMsg_TestMsg3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GamePlayerTest::TestMsg_TestMsg3 >(arena);
}
template<> PROTOBUF_NOINLINE ::GamePlayerTest::TestMsg*
Arena::CreateMaybeMessage< ::GamePlayerTest::TestMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GamePlayerTest::TestMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::GamePlayerTest::TestMsg2*
Arena::CreateMaybeMessage< ::GamePlayerTest::TestMsg2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GamePlayerTest::TestMsg2 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
