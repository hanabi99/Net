// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "test2.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
namespace GamePlayerTest {
class TestMsg;
struct TestMsgDefaultTypeInternal;
extern TestMsgDefaultTypeInternal _TestMsg_default_instance_;
class TestMsg2;
struct TestMsg2DefaultTypeInternal;
extern TestMsg2DefaultTypeInternal _TestMsg2_default_instance_;
class TestMsg_TestMapEntry_DoNotUse;
struct TestMsg_TestMapEntry_DoNotUseDefaultTypeInternal;
extern TestMsg_TestMapEntry_DoNotUseDefaultTypeInternal _TestMsg_TestMapEntry_DoNotUse_default_instance_;
class TestMsg_TestMsg3;
struct TestMsg_TestMsg3DefaultTypeInternal;
extern TestMsg_TestMsg3DefaultTypeInternal _TestMsg_TestMsg3_default_instance_;
}  // namespace GamePlayerTest
PROTOBUF_NAMESPACE_OPEN
template<> ::GamePlayerTest::TestMsg* Arena::CreateMaybeMessage<::GamePlayerTest::TestMsg>(Arena*);
template<> ::GamePlayerTest::TestMsg2* Arena::CreateMaybeMessage<::GamePlayerTest::TestMsg2>(Arena*);
template<> ::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse* Arena::CreateMaybeMessage<::GamePlayerTest::TestMsg_TestMapEntry_DoNotUse>(Arena*);
template<> ::GamePlayerTest::TestMsg_TestMsg3* Arena::CreateMaybeMessage<::GamePlayerTest::TestMsg_TestMsg3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace GamePlayerTest {

enum TestMsg_TestEnum2 : int {
  TestMsg_TestEnum2_NORMAL = 0,
  TestMsg_TestEnum2_BOSS = 1,
  TestMsg_TestEnum2_TestMsg_TestEnum2_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TestMsg_TestEnum2_TestMsg_TestEnum2_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TestMsg_TestEnum2_IsValid(int value);
constexpr TestMsg_TestEnum2 TestMsg_TestEnum2_TestEnum2_MIN = TestMsg_TestEnum2_NORMAL;
constexpr TestMsg_TestEnum2 TestMsg_TestEnum2_TestEnum2_MAX = TestMsg_TestEnum2_BOSS;
constexpr int TestMsg_TestEnum2_TestEnum2_ARRAYSIZE = TestMsg_TestEnum2_TestEnum2_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestMsg_TestEnum2_descriptor();
template<typename T>
inline const std::string& TestMsg_TestEnum2_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestMsg_TestEnum2>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestMsg_TestEnum2_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestMsg_TestEnum2_descriptor(), enum_t_value);
}
inline bool TestMsg_TestEnum2_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TestMsg_TestEnum2* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestMsg_TestEnum2>(
    TestMsg_TestEnum2_descriptor(), name, value);
}
enum TestEnum : int {
  NORMAL = 0,
  BOSS = 5,
  TestEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TestEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TestEnum_IsValid(int value);
constexpr TestEnum TestEnum_MIN = NORMAL;
constexpr TestEnum TestEnum_MAX = BOSS;
constexpr int TestEnum_ARRAYSIZE = TestEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestEnum_descriptor();
template<typename T>
inline const std::string& TestEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestEnum_descriptor(), enum_t_value);
}
inline bool TestEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TestEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestEnum>(
    TestEnum_descriptor(), name, value);
}
// ===================================================================

class TestMsg_TestMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestMsg_TestMapEntry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestMsg_TestMapEntry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  TestMsg_TestMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestMsg_TestMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestMsg_TestMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestMsg_TestMapEntry_DoNotUse& other);
  static const TestMsg_TestMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestMsg_TestMapEntry_DoNotUse*>(&_TestMsg_TestMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "GamePlayerTest.TestMsg.TestMapEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_protocol_2eproto;
};

// -------------------------------------------------------------------

class TestMsg_TestMsg3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GamePlayerTest.TestMsg.TestMsg3) */ {
 public:
  inline TestMsg_TestMsg3() : TestMsg_TestMsg3(nullptr) {}
  ~TestMsg_TestMsg3() override;
  explicit PROTOBUF_CONSTEXPR TestMsg_TestMsg3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMsg_TestMsg3(const TestMsg_TestMsg3& from);
  TestMsg_TestMsg3(TestMsg_TestMsg3&& from) noexcept
    : TestMsg_TestMsg3() {
    *this = ::std::move(from);
  }

  inline TestMsg_TestMsg3& operator=(const TestMsg_TestMsg3& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMsg_TestMsg3& operator=(TestMsg_TestMsg3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMsg_TestMsg3& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMsg_TestMsg3* internal_default_instance() {
    return reinterpret_cast<const TestMsg_TestMsg3*>(
               &_TestMsg_TestMsg3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestMsg_TestMsg3& a, TestMsg_TestMsg3& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMsg_TestMsg3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMsg_TestMsg3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMsg_TestMsg3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMsg_TestMsg3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMsg_TestMsg3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestMsg_TestMsg3& from) {
    TestMsg_TestMsg3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMsg_TestMsg3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GamePlayerTest.TestMsg.TestMsg3";
  }
  protected:
  explicit TestMsg_TestMsg3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestInt32FieldNumber = 1,
  };
  // int32 testInt32 = 1;
  void clear_testint32();
  int32_t testint32() const;
  void set_testint32(int32_t value);
  private:
  int32_t _internal_testint32() const;
  void _internal_set_testint32(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GamePlayerTest.TestMsg.TestMsg3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t testint32_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class TestMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GamePlayerTest.TestMsg) */ {
 public:
  inline TestMsg() : TestMsg(nullptr) {}
  ~TestMsg() override;
  explicit PROTOBUF_CONSTEXPR TestMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMsg(const TestMsg& from);
  TestMsg(TestMsg&& from) noexcept
    : TestMsg() {
    *this = ::std::move(from);
  }

  inline TestMsg& operator=(const TestMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMsg& operator=(TestMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMsg* internal_default_instance() {
    return reinterpret_cast<const TestMsg*>(
               &_TestMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestMsg& a, TestMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestMsg& from) {
    TestMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GamePlayerTest.TestMsg";
  }
  protected:
  explicit TestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestMsg_TestMsg3 TestMsg3;

  typedef TestMsg_TestEnum2 TestEnum2;
  static constexpr TestEnum2 NORMAL =
    TestMsg_TestEnum2_NORMAL;
  static constexpr TestEnum2 BOSS =
    TestMsg_TestEnum2_BOSS;
  static inline bool TestEnum2_IsValid(int value) {
    return TestMsg_TestEnum2_IsValid(value);
  }
  static constexpr TestEnum2 TestEnum2_MIN =
    TestMsg_TestEnum2_TestEnum2_MIN;
  static constexpr TestEnum2 TestEnum2_MAX =
    TestMsg_TestEnum2_TestEnum2_MAX;
  static constexpr int TestEnum2_ARRAYSIZE =
    TestMsg_TestEnum2_TestEnum2_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TestEnum2_descriptor() {
    return TestMsg_TestEnum2_descriptor();
  }
  template<typename T>
  static inline const std::string& TestEnum2_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TestEnum2>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TestEnum2_Name.");
    return TestMsg_TestEnum2_Name(enum_t_value);
  }
  static inline bool TestEnum2_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TestEnum2* value) {
    return TestMsg_TestEnum2_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kListIntFieldNumber = 16,
    kTestMapFieldNumber = 17,
    kTestStrFieldNumber = 14,
    kTestBytesFieldNumber = 15,
    kTestMsg2FieldNumber = 19,
    kTestMsg3FieldNumber = 20,
    kTestHeartFieldNumber = 24,
    kTestDFieldNumber = 2,
    kTestFFieldNumber = 1,
    kTestInt32FieldNumber = 3,
    kTestInt64FieldNumber = 4,
    kTestSInt64FieldNumber = 6,
    kTestSInt32FieldNumber = 5,
    kTestUIntFieldNumber = 7,
    kTestULongFieldNumber = 8,
    kTestFixed64FieldNumber = 10,
    kTestFixed32FieldNumber = 9,
    kTestSFixed32FieldNumber = 11,
    kTestSFixed64FieldNumber = 12,
    kTestEnumFieldNumber = 18,
    kTestBoolFieldNumber = 13,
    kTestBool2123123FieldNumber = 23,
    kTestEnum2FieldNumber = 21,
  };
  // repeated int32 listInt = 16;
  int listint_size() const;
  private:
  int _internal_listint_size() const;
  public:
  void clear_listint();
  private:
  int32_t _internal_listint(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_listint() const;
  void _internal_add_listint(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_listint();
  public:
  int32_t listint(int index) const;
  void set_listint(int index, int32_t value);
  void add_listint(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      listint() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_listint();

  // map<int32, string> testMap = 17;
  int testmap_size() const;
  private:
  int _internal_testmap_size() const;
  public:
  void clear_testmap();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      _internal_testmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      _internal_mutable_testmap();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      testmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      mutable_testmap();

  // string testStr = 14;
  void clear_teststr();
  const std::string& teststr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_teststr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_teststr();
  PROTOBUF_NODISCARD std::string* release_teststr();
  void set_allocated_teststr(std::string* teststr);
  private:
  const std::string& _internal_teststr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_teststr(const std::string& value);
  std::string* _internal_mutable_teststr();
  public:

  // bytes testBytes = 15;
  void clear_testbytes();
  const std::string& testbytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_testbytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_testbytes();
  PROTOBUF_NODISCARD std::string* release_testbytes();
  void set_allocated_testbytes(std::string* testbytes);
  private:
  const std::string& _internal_testbytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_testbytes(const std::string& value);
  std::string* _internal_mutable_testbytes();
  public:

  // .GamePlayerTest.TestMsg2 testMsg2 = 19;
  bool has_testmsg2() const;
  private:
  bool _internal_has_testmsg2() const;
  public:
  void clear_testmsg2();
  const ::GamePlayerTest::TestMsg2& testmsg2() const;
  PROTOBUF_NODISCARD ::GamePlayerTest::TestMsg2* release_testmsg2();
  ::GamePlayerTest::TestMsg2* mutable_testmsg2();
  void set_allocated_testmsg2(::GamePlayerTest::TestMsg2* testmsg2);
  private:
  const ::GamePlayerTest::TestMsg2& _internal_testmsg2() const;
  ::GamePlayerTest::TestMsg2* _internal_mutable_testmsg2();
  public:
  void unsafe_arena_set_allocated_testmsg2(
      ::GamePlayerTest::TestMsg2* testmsg2);
  ::GamePlayerTest::TestMsg2* unsafe_arena_release_testmsg2();

  // .GamePlayerTest.TestMsg.TestMsg3 testMsg3 = 20;
  bool has_testmsg3() const;
  private:
  bool _internal_has_testmsg3() const;
  public:
  void clear_testmsg3();
  const ::GamePlayerTest::TestMsg_TestMsg3& testmsg3() const;
  PROTOBUF_NODISCARD ::GamePlayerTest::TestMsg_TestMsg3* release_testmsg3();
  ::GamePlayerTest::TestMsg_TestMsg3* mutable_testmsg3();
  void set_allocated_testmsg3(::GamePlayerTest::TestMsg_TestMsg3* testmsg3);
  private:
  const ::GamePlayerTest::TestMsg_TestMsg3& _internal_testmsg3() const;
  ::GamePlayerTest::TestMsg_TestMsg3* _internal_mutable_testmsg3();
  public:
  void unsafe_arena_set_allocated_testmsg3(
      ::GamePlayerTest::TestMsg_TestMsg3* testmsg3);
  ::GamePlayerTest::TestMsg_TestMsg3* unsafe_arena_release_testmsg3();

  // .GameSystemTest.HeartMsg testHeart = 24;
  bool has_testheart() const;
  private:
  bool _internal_has_testheart() const;
  public:
  void clear_testheart();
  const ::GameSystemTest::HeartMsg& testheart() const;
  PROTOBUF_NODISCARD ::GameSystemTest::HeartMsg* release_testheart();
  ::GameSystemTest::HeartMsg* mutable_testheart();
  void set_allocated_testheart(::GameSystemTest::HeartMsg* testheart);
  private:
  const ::GameSystemTest::HeartMsg& _internal_testheart() const;
  ::GameSystemTest::HeartMsg* _internal_mutable_testheart();
  public:
  void unsafe_arena_set_allocated_testheart(
      ::GameSystemTest::HeartMsg* testheart);
  ::GameSystemTest::HeartMsg* unsafe_arena_release_testheart();

  // optional double testD = 2;
  bool has_testd() const;
  private:
  bool _internal_has_testd() const;
  public:
  void clear_testd();
  double testd() const;
  void set_testd(double value);
  private:
  double _internal_testd() const;
  void _internal_set_testd(double value);
  public:

  // float testF = 1;
  void clear_testf();
  float testf() const;
  void set_testf(float value);
  private:
  float _internal_testf() const;
  void _internal_set_testf(float value);
  public:

  // int32 testInt32 = 3;
  void clear_testint32();
  int32_t testint32() const;
  void set_testint32(int32_t value);
  private:
  int32_t _internal_testint32() const;
  void _internal_set_testint32(int32_t value);
  public:

  // int64 testInt64 = 4;
  void clear_testint64();
  int64_t testint64() const;
  void set_testint64(int64_t value);
  private:
  int64_t _internal_testint64() const;
  void _internal_set_testint64(int64_t value);
  public:

  // sint64 testSInt64 = 6;
  void clear_testsint64();
  int64_t testsint64() const;
  void set_testsint64(int64_t value);
  private:
  int64_t _internal_testsint64() const;
  void _internal_set_testsint64(int64_t value);
  public:

  // sint32 testSInt32 = 5;
  void clear_testsint32();
  int32_t testsint32() const;
  void set_testsint32(int32_t value);
  private:
  int32_t _internal_testsint32() const;
  void _internal_set_testsint32(int32_t value);
  public:

  // uint32 testUInt = 7;
  void clear_testuint();
  uint32_t testuint() const;
  void set_testuint(uint32_t value);
  private:
  uint32_t _internal_testuint() const;
  void _internal_set_testuint(uint32_t value);
  public:

  // uint64 testULong = 8;
  void clear_testulong();
  uint64_t testulong() const;
  void set_testulong(uint64_t value);
  private:
  uint64_t _internal_testulong() const;
  void _internal_set_testulong(uint64_t value);
  public:

  // fixed64 testFixed64 = 10;
  void clear_testfixed64();
  uint64_t testfixed64() const;
  void set_testfixed64(uint64_t value);
  private:
  uint64_t _internal_testfixed64() const;
  void _internal_set_testfixed64(uint64_t value);
  public:

  // fixed32 testFixed32 = 9;
  void clear_testfixed32();
  uint32_t testfixed32() const;
  void set_testfixed32(uint32_t value);
  private:
  uint32_t _internal_testfixed32() const;
  void _internal_set_testfixed32(uint32_t value);
  public:

  // sfixed32 testSFixed32 = 11;
  void clear_testsfixed32();
  int32_t testsfixed32() const;
  void set_testsfixed32(int32_t value);
  private:
  int32_t _internal_testsfixed32() const;
  void _internal_set_testsfixed32(int32_t value);
  public:

  // sfixed64 testSFixed64 = 12;
  void clear_testsfixed64();
  int64_t testsfixed64() const;
  void set_testsfixed64(int64_t value);
  private:
  int64_t _internal_testsfixed64() const;
  void _internal_set_testsfixed64(int64_t value);
  public:

  // .GamePlayerTest.TestEnum testEnum = 18;
  void clear_testenum();
  ::GamePlayerTest::TestEnum testenum() const;
  void set_testenum(::GamePlayerTest::TestEnum value);
  private:
  ::GamePlayerTest::TestEnum _internal_testenum() const;
  void _internal_set_testenum(::GamePlayerTest::TestEnum value);
  public:

  // bool testBool = 13;
  void clear_testbool();
  bool testbool() const;
  void set_testbool(bool value);
  private:
  bool _internal_testbool() const;
  void _internal_set_testbool(bool value);
  public:

  // bool testBool2123123 = 23;
  void clear_testbool2123123();
  bool testbool2123123() const;
  void set_testbool2123123(bool value);
  private:
  bool _internal_testbool2123123() const;
  void _internal_set_testbool2123123(bool value);
  public:

  // .GamePlayerTest.TestMsg.TestEnum2 testEnum2 = 21;
  void clear_testenum2();
  ::GamePlayerTest::TestMsg_TestEnum2 testenum2() const;
  void set_testenum2(::GamePlayerTest::TestMsg_TestEnum2 value);
  private:
  ::GamePlayerTest::TestMsg_TestEnum2 _internal_testenum2() const;
  void _internal_set_testenum2(::GamePlayerTest::TestMsg_TestEnum2 value);
  public:

  // @@protoc_insertion_point(class_scope:GamePlayerTest.TestMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > listint_;
    mutable std::atomic<int> _listint_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestMsg_TestMapEntry_DoNotUse,
        int32_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> testmap_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teststr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr testbytes_;
    ::GamePlayerTest::TestMsg2* testmsg2_;
    ::GamePlayerTest::TestMsg_TestMsg3* testmsg3_;
    ::GameSystemTest::HeartMsg* testheart_;
    double testd_;
    float testf_;
    int32_t testint32_;
    int64_t testint64_;
    int64_t testsint64_;
    int32_t testsint32_;
    uint32_t testuint_;
    uint64_t testulong_;
    uint64_t testfixed64_;
    uint32_t testfixed32_;
    int32_t testsfixed32_;
    int64_t testsfixed64_;
    int testenum_;
    bool testbool_;
    bool testbool2123123_;
    int testenum2_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class TestMsg2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GamePlayerTest.TestMsg2) */ {
 public:
  inline TestMsg2() : TestMsg2(nullptr) {}
  ~TestMsg2() override;
  explicit PROTOBUF_CONSTEXPR TestMsg2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMsg2(const TestMsg2& from);
  TestMsg2(TestMsg2&& from) noexcept
    : TestMsg2() {
    *this = ::std::move(from);
  }

  inline TestMsg2& operator=(const TestMsg2& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMsg2& operator=(TestMsg2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMsg2& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMsg2* internal_default_instance() {
    return reinterpret_cast<const TestMsg2*>(
               &_TestMsg2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TestMsg2& a, TestMsg2& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMsg2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMsg2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMsg2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMsg2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMsg2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestMsg2& from) {
    TestMsg2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMsg2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GamePlayerTest.TestMsg2";
  }
  protected:
  explicit TestMsg2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestInt32FieldNumber = 1,
  };
  // int32 testInt32 = 1;
  void clear_testint32();
  int32_t testint32() const;
  void set_testint32(int32_t value);
  private:
  int32_t _internal_testint32() const;
  void _internal_set_testint32(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GamePlayerTest.TestMsg2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t testint32_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TestMsg_TestMsg3

// int32 testInt32 = 1;
inline void TestMsg_TestMsg3::clear_testint32() {
  _impl_.testint32_ = 0;
}
inline int32_t TestMsg_TestMsg3::_internal_testint32() const {
  return _impl_.testint32_;
}
inline int32_t TestMsg_TestMsg3::testint32() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.TestMsg3.testInt32)
  return _internal_testint32();
}
inline void TestMsg_TestMsg3::_internal_set_testint32(int32_t value) {
  
  _impl_.testint32_ = value;
}
inline void TestMsg_TestMsg3::set_testint32(int32_t value) {
  _internal_set_testint32(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.TestMsg3.testInt32)
}

// -------------------------------------------------------------------

// TestMsg

// float testF = 1;
inline void TestMsg::clear_testf() {
  _impl_.testf_ = 0;
}
inline float TestMsg::_internal_testf() const {
  return _impl_.testf_;
}
inline float TestMsg::testf() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testF)
  return _internal_testf();
}
inline void TestMsg::_internal_set_testf(float value) {
  
  _impl_.testf_ = value;
}
inline void TestMsg::set_testf(float value) {
  _internal_set_testf(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testF)
}

// optional double testD = 2;
inline bool TestMsg::_internal_has_testd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestMsg::has_testd() const {
  return _internal_has_testd();
}
inline void TestMsg::clear_testd() {
  _impl_.testd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double TestMsg::_internal_testd() const {
  return _impl_.testd_;
}
inline double TestMsg::testd() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testD)
  return _internal_testd();
}
inline void TestMsg::_internal_set_testd(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.testd_ = value;
}
inline void TestMsg::set_testd(double value) {
  _internal_set_testd(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testD)
}

// int32 testInt32 = 3;
inline void TestMsg::clear_testint32() {
  _impl_.testint32_ = 0;
}
inline int32_t TestMsg::_internal_testint32() const {
  return _impl_.testint32_;
}
inline int32_t TestMsg::testint32() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testInt32)
  return _internal_testint32();
}
inline void TestMsg::_internal_set_testint32(int32_t value) {
  
  _impl_.testint32_ = value;
}
inline void TestMsg::set_testint32(int32_t value) {
  _internal_set_testint32(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testInt32)
}

// int64 testInt64 = 4;
inline void TestMsg::clear_testint64() {
  _impl_.testint64_ = int64_t{0};
}
inline int64_t TestMsg::_internal_testint64() const {
  return _impl_.testint64_;
}
inline int64_t TestMsg::testint64() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testInt64)
  return _internal_testint64();
}
inline void TestMsg::_internal_set_testint64(int64_t value) {
  
  _impl_.testint64_ = value;
}
inline void TestMsg::set_testint64(int64_t value) {
  _internal_set_testint64(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testInt64)
}

// sint32 testSInt32 = 5;
inline void TestMsg::clear_testsint32() {
  _impl_.testsint32_ = 0;
}
inline int32_t TestMsg::_internal_testsint32() const {
  return _impl_.testsint32_;
}
inline int32_t TestMsg::testsint32() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testSInt32)
  return _internal_testsint32();
}
inline void TestMsg::_internal_set_testsint32(int32_t value) {
  
  _impl_.testsint32_ = value;
}
inline void TestMsg::set_testsint32(int32_t value) {
  _internal_set_testsint32(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testSInt32)
}

// sint64 testSInt64 = 6;
inline void TestMsg::clear_testsint64() {
  _impl_.testsint64_ = int64_t{0};
}
inline int64_t TestMsg::_internal_testsint64() const {
  return _impl_.testsint64_;
}
inline int64_t TestMsg::testsint64() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testSInt64)
  return _internal_testsint64();
}
inline void TestMsg::_internal_set_testsint64(int64_t value) {
  
  _impl_.testsint64_ = value;
}
inline void TestMsg::set_testsint64(int64_t value) {
  _internal_set_testsint64(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testSInt64)
}

// uint32 testUInt = 7;
inline void TestMsg::clear_testuint() {
  _impl_.testuint_ = 0u;
}
inline uint32_t TestMsg::_internal_testuint() const {
  return _impl_.testuint_;
}
inline uint32_t TestMsg::testuint() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testUInt)
  return _internal_testuint();
}
inline void TestMsg::_internal_set_testuint(uint32_t value) {
  
  _impl_.testuint_ = value;
}
inline void TestMsg::set_testuint(uint32_t value) {
  _internal_set_testuint(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testUInt)
}

// uint64 testULong = 8;
inline void TestMsg::clear_testulong() {
  _impl_.testulong_ = uint64_t{0u};
}
inline uint64_t TestMsg::_internal_testulong() const {
  return _impl_.testulong_;
}
inline uint64_t TestMsg::testulong() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testULong)
  return _internal_testulong();
}
inline void TestMsg::_internal_set_testulong(uint64_t value) {
  
  _impl_.testulong_ = value;
}
inline void TestMsg::set_testulong(uint64_t value) {
  _internal_set_testulong(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testULong)
}

// fixed32 testFixed32 = 9;
inline void TestMsg::clear_testfixed32() {
  _impl_.testfixed32_ = 0u;
}
inline uint32_t TestMsg::_internal_testfixed32() const {
  return _impl_.testfixed32_;
}
inline uint32_t TestMsg::testfixed32() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testFixed32)
  return _internal_testfixed32();
}
inline void TestMsg::_internal_set_testfixed32(uint32_t value) {
  
  _impl_.testfixed32_ = value;
}
inline void TestMsg::set_testfixed32(uint32_t value) {
  _internal_set_testfixed32(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testFixed32)
}

// fixed64 testFixed64 = 10;
inline void TestMsg::clear_testfixed64() {
  _impl_.testfixed64_ = uint64_t{0u};
}
inline uint64_t TestMsg::_internal_testfixed64() const {
  return _impl_.testfixed64_;
}
inline uint64_t TestMsg::testfixed64() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testFixed64)
  return _internal_testfixed64();
}
inline void TestMsg::_internal_set_testfixed64(uint64_t value) {
  
  _impl_.testfixed64_ = value;
}
inline void TestMsg::set_testfixed64(uint64_t value) {
  _internal_set_testfixed64(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testFixed64)
}

// sfixed32 testSFixed32 = 11;
inline void TestMsg::clear_testsfixed32() {
  _impl_.testsfixed32_ = 0;
}
inline int32_t TestMsg::_internal_testsfixed32() const {
  return _impl_.testsfixed32_;
}
inline int32_t TestMsg::testsfixed32() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testSFixed32)
  return _internal_testsfixed32();
}
inline void TestMsg::_internal_set_testsfixed32(int32_t value) {
  
  _impl_.testsfixed32_ = value;
}
inline void TestMsg::set_testsfixed32(int32_t value) {
  _internal_set_testsfixed32(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testSFixed32)
}

// sfixed64 testSFixed64 = 12;
inline void TestMsg::clear_testsfixed64() {
  _impl_.testsfixed64_ = int64_t{0};
}
inline int64_t TestMsg::_internal_testsfixed64() const {
  return _impl_.testsfixed64_;
}
inline int64_t TestMsg::testsfixed64() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testSFixed64)
  return _internal_testsfixed64();
}
inline void TestMsg::_internal_set_testsfixed64(int64_t value) {
  
  _impl_.testsfixed64_ = value;
}
inline void TestMsg::set_testsfixed64(int64_t value) {
  _internal_set_testsfixed64(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testSFixed64)
}

// bool testBool = 13;
inline void TestMsg::clear_testbool() {
  _impl_.testbool_ = false;
}
inline bool TestMsg::_internal_testbool() const {
  return _impl_.testbool_;
}
inline bool TestMsg::testbool() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testBool)
  return _internal_testbool();
}
inline void TestMsg::_internal_set_testbool(bool value) {
  
  _impl_.testbool_ = value;
}
inline void TestMsg::set_testbool(bool value) {
  _internal_set_testbool(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testBool)
}

// string testStr = 14;
inline void TestMsg::clear_teststr() {
  _impl_.teststr_.ClearToEmpty();
}
inline const std::string& TestMsg::teststr() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testStr)
  return _internal_teststr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestMsg::set_teststr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.teststr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testStr)
}
inline std::string* TestMsg::mutable_teststr() {
  std::string* _s = _internal_mutable_teststr();
  // @@protoc_insertion_point(field_mutable:GamePlayerTest.TestMsg.testStr)
  return _s;
}
inline const std::string& TestMsg::_internal_teststr() const {
  return _impl_.teststr_.Get();
}
inline void TestMsg::_internal_set_teststr(const std::string& value) {
  
  _impl_.teststr_.Set(value, GetArenaForAllocation());
}
inline std::string* TestMsg::_internal_mutable_teststr() {
  
  return _impl_.teststr_.Mutable(GetArenaForAllocation());
}
inline std::string* TestMsg::release_teststr() {
  // @@protoc_insertion_point(field_release:GamePlayerTest.TestMsg.testStr)
  return _impl_.teststr_.Release();
}
inline void TestMsg::set_allocated_teststr(std::string* teststr) {
  if (teststr != nullptr) {
    
  } else {
    
  }
  _impl_.teststr_.SetAllocated(teststr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.teststr_.IsDefault()) {
    _impl_.teststr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GamePlayerTest.TestMsg.testStr)
}

// bytes testBytes = 15;
inline void TestMsg::clear_testbytes() {
  _impl_.testbytes_.ClearToEmpty();
}
inline const std::string& TestMsg::testbytes() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testBytes)
  return _internal_testbytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestMsg::set_testbytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.testbytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testBytes)
}
inline std::string* TestMsg::mutable_testbytes() {
  std::string* _s = _internal_mutable_testbytes();
  // @@protoc_insertion_point(field_mutable:GamePlayerTest.TestMsg.testBytes)
  return _s;
}
inline const std::string& TestMsg::_internal_testbytes() const {
  return _impl_.testbytes_.Get();
}
inline void TestMsg::_internal_set_testbytes(const std::string& value) {
  
  _impl_.testbytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TestMsg::_internal_mutable_testbytes() {
  
  return _impl_.testbytes_.Mutable(GetArenaForAllocation());
}
inline std::string* TestMsg::release_testbytes() {
  // @@protoc_insertion_point(field_release:GamePlayerTest.TestMsg.testBytes)
  return _impl_.testbytes_.Release();
}
inline void TestMsg::set_allocated_testbytes(std::string* testbytes) {
  if (testbytes != nullptr) {
    
  } else {
    
  }
  _impl_.testbytes_.SetAllocated(testbytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.testbytes_.IsDefault()) {
    _impl_.testbytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GamePlayerTest.TestMsg.testBytes)
}

// repeated int32 listInt = 16;
inline int TestMsg::_internal_listint_size() const {
  return _impl_.listint_.size();
}
inline int TestMsg::listint_size() const {
  return _internal_listint_size();
}
inline void TestMsg::clear_listint() {
  _impl_.listint_.Clear();
}
inline int32_t TestMsg::_internal_listint(int index) const {
  return _impl_.listint_.Get(index);
}
inline int32_t TestMsg::listint(int index) const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.listInt)
  return _internal_listint(index);
}
inline void TestMsg::set_listint(int index, int32_t value) {
  _impl_.listint_.Set(index, value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.listInt)
}
inline void TestMsg::_internal_add_listint(int32_t value) {
  _impl_.listint_.Add(value);
}
inline void TestMsg::add_listint(int32_t value) {
  _internal_add_listint(value);
  // @@protoc_insertion_point(field_add:GamePlayerTest.TestMsg.listInt)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestMsg::_internal_listint() const {
  return _impl_.listint_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestMsg::listint() const {
  // @@protoc_insertion_point(field_list:GamePlayerTest.TestMsg.listInt)
  return _internal_listint();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestMsg::_internal_mutable_listint() {
  return &_impl_.listint_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestMsg::mutable_listint() {
  // @@protoc_insertion_point(field_mutable_list:GamePlayerTest.TestMsg.listInt)
  return _internal_mutable_listint();
}

// map<int32, string> testMap = 17;
inline int TestMsg::_internal_testmap_size() const {
  return _impl_.testmap_.size();
}
inline int TestMsg::testmap_size() const {
  return _internal_testmap_size();
}
inline void TestMsg::clear_testmap() {
  _impl_.testmap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
TestMsg::_internal_testmap() const {
  return _impl_.testmap_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
TestMsg::testmap() const {
  // @@protoc_insertion_point(field_map:GamePlayerTest.TestMsg.testMap)
  return _internal_testmap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
TestMsg::_internal_mutable_testmap() {
  return _impl_.testmap_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
TestMsg::mutable_testmap() {
  // @@protoc_insertion_point(field_mutable_map:GamePlayerTest.TestMsg.testMap)
  return _internal_mutable_testmap();
}

// .GamePlayerTest.TestEnum testEnum = 18;
inline void TestMsg::clear_testenum() {
  _impl_.testenum_ = 0;
}
inline ::GamePlayerTest::TestEnum TestMsg::_internal_testenum() const {
  return static_cast< ::GamePlayerTest::TestEnum >(_impl_.testenum_);
}
inline ::GamePlayerTest::TestEnum TestMsg::testenum() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testEnum)
  return _internal_testenum();
}
inline void TestMsg::_internal_set_testenum(::GamePlayerTest::TestEnum value) {
  
  _impl_.testenum_ = value;
}
inline void TestMsg::set_testenum(::GamePlayerTest::TestEnum value) {
  _internal_set_testenum(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testEnum)
}

// .GamePlayerTest.TestMsg2 testMsg2 = 19;
inline bool TestMsg::_internal_has_testmsg2() const {
  return this != internal_default_instance() && _impl_.testmsg2_ != nullptr;
}
inline bool TestMsg::has_testmsg2() const {
  return _internal_has_testmsg2();
}
inline void TestMsg::clear_testmsg2() {
  if (GetArenaForAllocation() == nullptr && _impl_.testmsg2_ != nullptr) {
    delete _impl_.testmsg2_;
  }
  _impl_.testmsg2_ = nullptr;
}
inline const ::GamePlayerTest::TestMsg2& TestMsg::_internal_testmsg2() const {
  const ::GamePlayerTest::TestMsg2* p = _impl_.testmsg2_;
  return p != nullptr ? *p : reinterpret_cast<const ::GamePlayerTest::TestMsg2&>(
      ::GamePlayerTest::_TestMsg2_default_instance_);
}
inline const ::GamePlayerTest::TestMsg2& TestMsg::testmsg2() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testMsg2)
  return _internal_testmsg2();
}
inline void TestMsg::unsafe_arena_set_allocated_testmsg2(
    ::GamePlayerTest::TestMsg2* testmsg2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.testmsg2_);
  }
  _impl_.testmsg2_ = testmsg2;
  if (testmsg2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GamePlayerTest.TestMsg.testMsg2)
}
inline ::GamePlayerTest::TestMsg2* TestMsg::release_testmsg2() {
  
  ::GamePlayerTest::TestMsg2* temp = _impl_.testmsg2_;
  _impl_.testmsg2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GamePlayerTest::TestMsg2* TestMsg::unsafe_arena_release_testmsg2() {
  // @@protoc_insertion_point(field_release:GamePlayerTest.TestMsg.testMsg2)
  
  ::GamePlayerTest::TestMsg2* temp = _impl_.testmsg2_;
  _impl_.testmsg2_ = nullptr;
  return temp;
}
inline ::GamePlayerTest::TestMsg2* TestMsg::_internal_mutable_testmsg2() {
  
  if (_impl_.testmsg2_ == nullptr) {
    auto* p = CreateMaybeMessage<::GamePlayerTest::TestMsg2>(GetArenaForAllocation());
    _impl_.testmsg2_ = p;
  }
  return _impl_.testmsg2_;
}
inline ::GamePlayerTest::TestMsg2* TestMsg::mutable_testmsg2() {
  ::GamePlayerTest::TestMsg2* _msg = _internal_mutable_testmsg2();
  // @@protoc_insertion_point(field_mutable:GamePlayerTest.TestMsg.testMsg2)
  return _msg;
}
inline void TestMsg::set_allocated_testmsg2(::GamePlayerTest::TestMsg2* testmsg2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.testmsg2_;
  }
  if (testmsg2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(testmsg2);
    if (message_arena != submessage_arena) {
      testmsg2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, testmsg2, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.testmsg2_ = testmsg2;
  // @@protoc_insertion_point(field_set_allocated:GamePlayerTest.TestMsg.testMsg2)
}

// .GamePlayerTest.TestMsg.TestMsg3 testMsg3 = 20;
inline bool TestMsg::_internal_has_testmsg3() const {
  return this != internal_default_instance() && _impl_.testmsg3_ != nullptr;
}
inline bool TestMsg::has_testmsg3() const {
  return _internal_has_testmsg3();
}
inline void TestMsg::clear_testmsg3() {
  if (GetArenaForAllocation() == nullptr && _impl_.testmsg3_ != nullptr) {
    delete _impl_.testmsg3_;
  }
  _impl_.testmsg3_ = nullptr;
}
inline const ::GamePlayerTest::TestMsg_TestMsg3& TestMsg::_internal_testmsg3() const {
  const ::GamePlayerTest::TestMsg_TestMsg3* p = _impl_.testmsg3_;
  return p != nullptr ? *p : reinterpret_cast<const ::GamePlayerTest::TestMsg_TestMsg3&>(
      ::GamePlayerTest::_TestMsg_TestMsg3_default_instance_);
}
inline const ::GamePlayerTest::TestMsg_TestMsg3& TestMsg::testmsg3() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testMsg3)
  return _internal_testmsg3();
}
inline void TestMsg::unsafe_arena_set_allocated_testmsg3(
    ::GamePlayerTest::TestMsg_TestMsg3* testmsg3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.testmsg3_);
  }
  _impl_.testmsg3_ = testmsg3;
  if (testmsg3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GamePlayerTest.TestMsg.testMsg3)
}
inline ::GamePlayerTest::TestMsg_TestMsg3* TestMsg::release_testmsg3() {
  
  ::GamePlayerTest::TestMsg_TestMsg3* temp = _impl_.testmsg3_;
  _impl_.testmsg3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GamePlayerTest::TestMsg_TestMsg3* TestMsg::unsafe_arena_release_testmsg3() {
  // @@protoc_insertion_point(field_release:GamePlayerTest.TestMsg.testMsg3)
  
  ::GamePlayerTest::TestMsg_TestMsg3* temp = _impl_.testmsg3_;
  _impl_.testmsg3_ = nullptr;
  return temp;
}
inline ::GamePlayerTest::TestMsg_TestMsg3* TestMsg::_internal_mutable_testmsg3() {
  
  if (_impl_.testmsg3_ == nullptr) {
    auto* p = CreateMaybeMessage<::GamePlayerTest::TestMsg_TestMsg3>(GetArenaForAllocation());
    _impl_.testmsg3_ = p;
  }
  return _impl_.testmsg3_;
}
inline ::GamePlayerTest::TestMsg_TestMsg3* TestMsg::mutable_testmsg3() {
  ::GamePlayerTest::TestMsg_TestMsg3* _msg = _internal_mutable_testmsg3();
  // @@protoc_insertion_point(field_mutable:GamePlayerTest.TestMsg.testMsg3)
  return _msg;
}
inline void TestMsg::set_allocated_testmsg3(::GamePlayerTest::TestMsg_TestMsg3* testmsg3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.testmsg3_;
  }
  if (testmsg3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(testmsg3);
    if (message_arena != submessage_arena) {
      testmsg3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, testmsg3, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.testmsg3_ = testmsg3;
  // @@protoc_insertion_point(field_set_allocated:GamePlayerTest.TestMsg.testMsg3)
}

// .GamePlayerTest.TestMsg.TestEnum2 testEnum2 = 21;
inline void TestMsg::clear_testenum2() {
  _impl_.testenum2_ = 0;
}
inline ::GamePlayerTest::TestMsg_TestEnum2 TestMsg::_internal_testenum2() const {
  return static_cast< ::GamePlayerTest::TestMsg_TestEnum2 >(_impl_.testenum2_);
}
inline ::GamePlayerTest::TestMsg_TestEnum2 TestMsg::testenum2() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testEnum2)
  return _internal_testenum2();
}
inline void TestMsg::_internal_set_testenum2(::GamePlayerTest::TestMsg_TestEnum2 value) {
  
  _impl_.testenum2_ = value;
}
inline void TestMsg::set_testenum2(::GamePlayerTest::TestMsg_TestEnum2 value) {
  _internal_set_testenum2(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testEnum2)
}

// bool testBool2123123 = 23;
inline void TestMsg::clear_testbool2123123() {
  _impl_.testbool2123123_ = false;
}
inline bool TestMsg::_internal_testbool2123123() const {
  return _impl_.testbool2123123_;
}
inline bool TestMsg::testbool2123123() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testBool2123123)
  return _internal_testbool2123123();
}
inline void TestMsg::_internal_set_testbool2123123(bool value) {
  
  _impl_.testbool2123123_ = value;
}
inline void TestMsg::set_testbool2123123(bool value) {
  _internal_set_testbool2123123(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg.testBool2123123)
}

// .GameSystemTest.HeartMsg testHeart = 24;
inline bool TestMsg::_internal_has_testheart() const {
  return this != internal_default_instance() && _impl_.testheart_ != nullptr;
}
inline bool TestMsg::has_testheart() const {
  return _internal_has_testheart();
}
inline const ::GameSystemTest::HeartMsg& TestMsg::_internal_testheart() const {
  const ::GameSystemTest::HeartMsg* p = _impl_.testheart_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameSystemTest::HeartMsg&>(
      ::GameSystemTest::_HeartMsg_default_instance_);
}
inline const ::GameSystemTest::HeartMsg& TestMsg::testheart() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg.testHeart)
  return _internal_testheart();
}
inline void TestMsg::unsafe_arena_set_allocated_testheart(
    ::GameSystemTest::HeartMsg* testheart) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.testheart_);
  }
  _impl_.testheart_ = testheart;
  if (testheart) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GamePlayerTest.TestMsg.testHeart)
}
inline ::GameSystemTest::HeartMsg* TestMsg::release_testheart() {
  
  ::GameSystemTest::HeartMsg* temp = _impl_.testheart_;
  _impl_.testheart_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GameSystemTest::HeartMsg* TestMsg::unsafe_arena_release_testheart() {
  // @@protoc_insertion_point(field_release:GamePlayerTest.TestMsg.testHeart)
  
  ::GameSystemTest::HeartMsg* temp = _impl_.testheart_;
  _impl_.testheart_ = nullptr;
  return temp;
}
inline ::GameSystemTest::HeartMsg* TestMsg::_internal_mutable_testheart() {
  
  if (_impl_.testheart_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameSystemTest::HeartMsg>(GetArenaForAllocation());
    _impl_.testheart_ = p;
  }
  return _impl_.testheart_;
}
inline ::GameSystemTest::HeartMsg* TestMsg::mutable_testheart() {
  ::GameSystemTest::HeartMsg* _msg = _internal_mutable_testheart();
  // @@protoc_insertion_point(field_mutable:GamePlayerTest.TestMsg.testHeart)
  return _msg;
}
inline void TestMsg::set_allocated_testheart(::GameSystemTest::HeartMsg* testheart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.testheart_);
  }
  if (testheart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(testheart));
    if (message_arena != submessage_arena) {
      testheart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, testheart, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.testheart_ = testheart;
  // @@protoc_insertion_point(field_set_allocated:GamePlayerTest.TestMsg.testHeart)
}

// -------------------------------------------------------------------

// TestMsg2

// int32 testInt32 = 1;
inline void TestMsg2::clear_testint32() {
  _impl_.testint32_ = 0;
}
inline int32_t TestMsg2::_internal_testint32() const {
  return _impl_.testint32_;
}
inline int32_t TestMsg2::testint32() const {
  // @@protoc_insertion_point(field_get:GamePlayerTest.TestMsg2.testInt32)
  return _internal_testint32();
}
inline void TestMsg2::_internal_set_testint32(int32_t value) {
  
  _impl_.testint32_ = value;
}
inline void TestMsg2::set_testint32(int32_t value) {
  _internal_set_testint32(value);
  // @@protoc_insertion_point(field_set:GamePlayerTest.TestMsg2.testInt32)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GamePlayerTest

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::GamePlayerTest::TestMsg_TestEnum2> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GamePlayerTest::TestMsg_TestEnum2>() {
  return ::GamePlayerTest::TestMsg_TestEnum2_descriptor();
}
template <> struct is_proto_enum< ::GamePlayerTest::TestEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GamePlayerTest::TestEnum>() {
  return ::GamePlayerTest::TestEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
